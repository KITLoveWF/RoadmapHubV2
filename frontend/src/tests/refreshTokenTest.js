/**
 * Test Script: Ki·ªÉm tra Auto Refresh Token
 *
 * C√°ch test:
 * 1. Login v√† l∆∞u tokens
 * 2. ƒê·ª£i access token h·∫øt h·∫°n (ho·∫∑c manual set expired token)
 * 3. G·ªçi API b·∫•t k·ª≥
 * 4. Check console log ƒë·ªÉ xem flow
 */

import api from "../utils/apiWithRefresh";
import { getAccessToken, parseJwt } from "../utils/tokenManager";

// Test 1: Ki·ªÉm tra token expiration
export const testTokenExpiration = () => {
  const accessToken = getAccessToken();
  if (!accessToken) {
    console.log("‚ùå No access token found");
    return;
  }

  const payload = parseJwt(accessToken);
  const expiresAt = new Date(payload.exp * 1000);
  const now = new Date();
  const timeLeft = expiresAt - now;

  console.log("üìä Token Info:");
  console.log("- Expires at:", expiresAt.toLocaleString());
  console.log("- Current time:", now.toLocaleString());
  console.log("- Time left:", Math.floor(timeLeft / 1000 / 60), "minutes");

  if (timeLeft < 0) {
    console.log("‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n - s·∫Ω t·ª± ƒë·ªông refresh khi g·ªçi API");
  } else {
    console.log("‚úÖ Token c√≤n h·ª£p l·ªá");
  }
};

// Test 2: G·ªçi API v·ªõi token h·∫øt h·∫°n
export const testAutoRefresh = async () => {
  console.log("üß™ Testing auto refresh...");

  try {
    // G·ªçi m·ªôt API b·∫•t k·ª≥
    console.log("üì§ Sending request to /auth/check-login...");
    const response = await api.post("/auth/check-login");

    if (response.data.status) {
      console.log("‚úÖ Request th√†nh c√¥ng!");
      console.log("üë§ User:", response.data.user);
      console.log("üéâ Auto refresh ho·∫°t ƒë·ªông t·ªët!");
    }
  } catch (error) {
    console.error("‚ùå Request failed:", error);
    if (error.response?.status === 401) {
      console.log("‚ö†Ô∏è Refresh token c≈©ng h·∫øt h·∫°n ho·∫∑c invalid");
      console.log("‚Üí User c·∫ßn login l·∫°i");
    }
  }
};

// Test 3: Simulate expired token
export const testWithExpiredToken = async () => {
  console.log("üß™ Testing with manually expired token...");

  // T·∫°o m·ªôt token ƒë√£ h·∫øt h·∫°n (exp = qu√° kh·ª©)
  const expiredToken =
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMyIsImVtYWlsIjoidGVzdEBleGFtcGxlLmNvbSIsImV4cCI6MTYwMDAwMDAwMH0.invalid";

  // L∆∞u token expired
  localStorage.setItem("accessToken", expiredToken);

  console.log("‚è∞ Set expired token");
  console.log("üì§ Sending request...");

  try {
    const response = await api.post("/auth/check-login");
    console.log("‚úÖ Auto refresh worked! Response:", response.data);
  } catch (error) {
    console.error("‚ùå Failed:", error.message);
  }
};

// Test 4: Multiple concurrent requests
export const testConcurrentRequests = async () => {
  console.log("üß™ Testing multiple concurrent requests...");

  try {
    // G·ªçi nhi·ªÅu API c√πng l√∫c
    const promises = [
      api.post("/auth/check-login"),
      api.get("/roadmap"),
      api.get("/profile"),
    ];

    console.log("üì§ Sending 3 concurrent requests...");
    const results = await Promise.all(promises);

    console.log("‚úÖ All requests succeeded!");
    console.log("‚Üí Queue mechanism ho·∫°t ƒë·ªông t·ªët (ch·ªâ refresh 1 l·∫ßn)");
    results.forEach((res, i) => {
      console.log(`  Request ${i + 1}:`, res.data.status ? "‚úÖ" : "‚ùå");
    });
  } catch (error) {
    console.error("‚ùå Some requests failed:", error);
  }
};

// Test 5: Check refresh token in localStorage
export const checkStoredTokens = () => {
  const accessToken = localStorage.getItem("accessToken");
  const refreshToken = localStorage.getItem("refreshToken");

  console.log("üì¶ Tokens in localStorage:");
  console.log("- Access Token:", accessToken ? "‚úÖ Present" : "‚ùå Missing");
  console.log("- Refresh Token:", refreshToken ? "‚úÖ Present" : "‚ùå Missing");

  if (accessToken) {
    const payload = parseJwt(accessToken);
    console.log("- User ID:", payload?.id);
    console.log("- Email:", payload?.email);
  }
};

// Run all tests
export const runAllTests = async () => {
  console.log("üöÄ Starting Refresh Token Tests...\n");

  checkStoredTokens();
  console.log("\n---\n");

  testTokenExpiration();
  console.log("\n---\n");

  await testAutoRefresh();
  console.log("\n---\n");

  await testConcurrentRequests();
  console.log("\n---\n");

  console.log("‚úÖ All tests completed!");
};

export default {
  testTokenExpiration,
  testAutoRefresh,
  testWithExpiredToken,
  testConcurrentRequests,
  checkStoredTokens,
  runAllTests,
};
